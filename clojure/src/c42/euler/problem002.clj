;; Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

;; Find the sum of all the even-valued terms in the sequence which do not exceed four million.

(ns c42.euler (:use clojure.test) (:require clojure.contrib.seq))

(defn fibonacci
	[fib n]
	(if
			(> (first fib) n) (rest fib)
			(recur  
						 (vec (cons (+ (fib 0) (fib 1)) fib))
						 n)))

(def fibonacci-upto 
	(partial fibonacci [2 1]))

(defn sum-of-even-fibonacci-terms-upto
	[n]
	(reduce + (filter even? (fibonacci-upto n))))

(def fibonacci-lazy
  ((fn rfib [a b] 
       (lazy-seq 
				(cons a (rfib b (+ a b))))) 
    1 2))

(defn lazy-sum-of-even-fibonacci-terms-upto 
	[n]
	(reductions + 
					(filter (fn [x]
						(and (even? x) (< n x))) fibonacci-lazy)))

(testing "Sum of even fibbonacci terms"
	(is (= 44 (sum-of-even-fibonacci-terms-upto 50)))
	(is (= 4613732 (sum-of-even-fibonacci-terms-upto 4000000)))
	(is (= 44 (lazy-sum-of-even-fibonacci-terms-upto 50))))

(testing "Fibonacci"
	(is (= '(8 5 3 2 1 1 0) (fibonacci [1 0] 10))))